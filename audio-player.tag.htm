<htm>
	<div id='position'>
		<span id='played' class=''></span>
		<input id='slider' type="range" min="0" max="100" value="0">
		<span id='total' class=''></span>
	</div>
	<div id='controls'>
		<!-- <div> -->
		<img src='../icons/volume_down.png' on-tap='volume' volume='-0.1' />
		<!-- <span id='volume'>100%</span> -->
		<img src='../icons/volume_up.png' on-tap='volume' volume='+0.1' />
		<!-- </div> -->
		<!-- <div> -->
		<img src='../icons/backward.png' on-tap='backward' />
		<!-- <span id='played' class=''></span> -->
		<!-- <button on-tap='play_pause'></button> -->
		<img id='play_pause' src='../icons/play.png' on-tap='play_pause' />
		<!-- <span id='total' class=''></span> -->
		<img src='../icons/forward.png' on-tap='forward' />
		<!-- </div> -->
		<!-- <div> -->
		<img src='../icons/slower.png' on-tap='speed' speed='-0.1' />
		<!-- <span id='speed'>100%</span> -->
		<img src='../icons/faster.png' on-tap='speed' speed='+0.1' />
		<!-- </div> -->
	</div>
	<div id='player'>
		<audio controls="controls">
			<!-- <source src="horse.ogg" type="audio/ogg"> -->
			<!-- <source src="https://open.live.bbc.co.uk/mediaselector/6/redir/version/2.0/mediaset/audio-nondrm-download-low/proto/https/vpid/p0902c0s.mp3" type="audio/mpeg"/> -->
			<source src="" type="audio/mpeg" />
			Your browser does not support the audio element.
		</audio>
	</div>
	<div id='notification'>aa</div>
</htm>

<style>
	@import url('https://max.pub/css/fira.css');

	:host {
		display: block;
		background: #000;
		/* height: 50px; */
		--front-mark: #aaf;
		--back-back: #333;
		--size: 25px;
	}

	#notification {
		position: absolute;
		top: -10px;
		margin: 0 auto;
		left: 50%;
		transform: translateX(-50%);
		background: gray;
		padding: .1em .3em;
	}

	audio {
		display: none;
	}

	#position {
		display: flex;
		justify-content: space-between;
		font-size: 11px;
		/* height: 20px; */
		/* margin-bottom:.5rem; */
		/* border: 1px solid red */
	}

	#controls {
		/* font-size: 12px; */
		display: flex;
		justify-content: space-around;
		padding: .5rem
	}

	#controls span {
		font-size: 15px;
		line-height: 32px;
		vertical-align: top;
		display: inline-block
	}

	#controls img {
		width: 32px;
		filter: invert(100%);
		display: inline-block;
	}

	/* The slider itself */
	#slider {
		-webkit-appearance: none;
		/* Override default CSS styles */
		appearance: none;
		width: 100%;
		/* Full-width */
		height: 7px;
		/* Specified height */
		background: var(--back-back);
		/* Grey background */
		outline: none;
		border-radius: 10px;
		/* Remove outline */
		/* opacity: 0.7; */
		/* Set transparency (for mouse-over effects on hover) */
		/* -webkit-transition: .2s; */
		/* 0.2 seconds transition on hover */
		/* transition: opacity .2s; */
	}

	/* Mouse-over effects */
	#slider:hover {
		opacity: 1;
		/* Fully shown on mouse-over */
	}

	/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
	#slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		/* Override default look */
		appearance: none;
		width: var(--size);
		/* Set a specific slider handle width */
		height: var(--size);
		/* Slider handle height */
		background: var(--front-mark);
		/* Green background */
		cursor: pointer;
		/* Cursor on hover */
		border-radius: var(--size);
	}

	#slider::-moz-range-thumb {
		width: var(--size);
		/* Set a specific slider handle width */
		height: var(--size);
		/* Slider handle height */
		background: var(--front-mark);
		/* Green background */
		cursor: pointer;
		/* Cursor on hover */
		border-radius: var(--size);
	}
</style>

<script>
	function humanTime(sec) {
		// if (sec < 60) return Math.round(sec)
		// if (sec < 60 * 60) return Math.floor(sec / 60) + ':' + Math.floor(sec % 60)
		return String(Math.floor(sec / 60)).padStart(2, '0') + ':' + String(Math.floor(sec % 60)).padStart(2, '0')
	}

	class {
		async $onReady() {
			this.player = this.$view.Q('audio', 1);
			this.noti = this.$view.Q('#notification', 1);
			this.slider = this.$view.Q('#slider', 1);
			this.slider.addEventListener('input', e => this.changePosition())
			window.addEventListener('play', e => this.play(e.detail.url));
			setInterval(() => this.update(), 500);
			// this.$data = await fetch(`https://podcasts.files.bbci.co.uk/p02nq0gn.rss`).then(x => x.text())
			// console.log('data', this.$data)
		}
		play(url) {
			// let url = node.getAttribute('url')
			console.log('audio-play', url)
			// this.$event('play', { url })
			this.player.innerHTML = `<source src="${url}" type="audio/mpeg" />`;
			this.player.load()
			this.player.play();
			// let src = this.$view.Q('audio>source', 1);
			// console.log('src', src)
			// src.setAttribute('src', url)
			// this.$view.Q('audio', 1).play()
		}
		// update
		update() {
			// console.log('update slider')
			// console.log('time', this.player.currentTime, this.player.duration)
			this.slider.setAttribute('max', this.player.duration)
			this.slider.value = this.player.currentTime
			this.$view.Q('#played', 1).textContent = humanTime(this.player.currentTime)
			this.$view.Q('#total', 1).textContent = humanTime(this.player.duration || 0)
			this.$view.Q('#play_pause', 1).setAttribute('src', '../icons/' + (this.player.paused ? 'play.png' : 'pause.png'))
			// this.$view.Q('#speed', 1).textContent = Math.round(this.player.playbackRate * 100) + '%'
			// this.$view.Q('#volume', 1).textContent = Math.round(this.player.volume * 100) + '%'
		}
		changePosition() {
			console.log('pos', this.slider.value)
			this.player.currentTime = this.slider.value;
			this.update()
		}
		play_pause(node) {
			if (this.player.paused) this.player.play()
			else this.player.pause()
			this.update()
		}
		forward() {
			this.player.currentTime += 30;
			this.update()
		}
		backward() {
			this.player.currentTime -= 15;
			this.update()
		}
		speed(node) {
			this.player.playbackRate += node.getAttribute('speed') * 1;
			this.update()
			this.notify(Math.round(this.player.playbackRate * 100) + '% speed')
		}
		volume(node) {
			this.player.volume += node.getAttribute('volume') * 1;
			this.update()
			this.notify(Math.round(this.player.volume * 100) + '% volume')
		}
		notify(text) {
			this.noti.textContent = text;
			this.noti.hidden = false;
			setTimeout(e => this.noti.hidden = true, 1000)
		}
	}
</script>